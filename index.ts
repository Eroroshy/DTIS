import { app, BrowserWindow, ipcMain, net } from 'electron';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

//Paginas de la app
declare const LOGIN_WINDOW_WEBPACK_ENTRY: string;
declare const LOGIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

declare const HOME_WINDOW_WEBPACK_ENTRY: string;
declare const HOME_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let mainWindow: BrowserWindow | null = null;

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      contextIsolation: true,
      nodeIntegration: false,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(LOGIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  mainWindow.on('closed', () => {
    mainWindow = null;
  });
};

ipcMain.handle('nav:toLogin', async () => {
  if (!mainWindow) return;
  console.log('Navigating to login');
    await mainWindow.loadURL(LOGIN_WINDOW_WEBPACK_ENTRY);
    return true;    
});

ipcMain.handle('nav:toHome', async () => {
  if (!mainWindow) return; {
    await mainWindow.loadURL(HOME_WINDOW_WEBPACK_ENTRY);
    return true;
  } 
})

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
ipcMain.handle('http:get', async (_e, url: string, options?: any) => {
  console.log(`ipcMain: http:get -> ${url}`);
  const res = await net.fetch(url, { method: 'GET', ...options });
  const text = await res.text();
  let body: any = text;
  try { body = JSON.parse(text); } catch (err) { /* not JSON, return raw text */ }
  console.log(`ipcMain: http:get response status=${res.status}`);
  return { status: res.status, ok: res.ok, body };
});

ipcMain.handle('http:post', async (_e, url: string, bodyPayload: any, options?: any) =>  {
  console.log("haciendo post a ", url, " con body ", bodyPayload, " y opciones ", options);
  const res = await net.fetch(url, { 
    method: 'POST', 
    headers: { 'content-type': 'application/json', ...(options?.headers || {}) },
    body: JSON.stringify(bodyPayload),
    ...options 
  });
  const text = await res.text();
  let body: any = text;
  try { body = JSON.parse(text); } catch (err) { /* not JSON */ }
  console.log(`ipcMain: http:post response status=${res.status}`);
  return { status: res.status, ok: res.ok, body };
});
